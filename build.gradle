buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven {
            name = 'wf-repo'
            url = 'https://nexus.guce.gouv.ci/repository/maven-public/'
            credentials {
                username "$wfRepoUsername"
                password "$wfRepoPassword"
            }
        }
    }
    dependencies {
        classpath 'com.webbfontaine.gradle.plugins:publish:[1.1.0,1.2.0)'
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.webbfontaine.gradle.plugins:grails-layout-asset-pipeline:[1.0.2,1.1.0)"
        classpath "org.grails.plugins:hibernate5:${gormVersion - ".RELEASE"}"
        classpath "com.webbfontaine.grails.plugins:i18n-asset-pipeline-gradle:${i18nAssetVersion}"
        classpath "com.webbfontaine.gradle.plugins:jasper-compiler:2.0.0"
        classpath 'com.webbfontaine.gradle.plugins:clover:[1.0.1,1.1.0)'
    }
}

version "3.3.8"
group "com.webbfontaine"
repositories {
    mavenLocal()
    maven {
        name = 'wf-repo'
        url = 'https://nexus.guce.gouv.ci/repository/maven-public/'
        credentials {
            username wfRepoUsername
            password wfRepoPassword
        }
    }
}
apply plugin: "com.webbfontaine.gradle.plugins.repository"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "com.webbfontaine.gradle.plugins.grails-layout-asset-pipeline"
apply plugin: "org.grails.plugins.i18n-asset-pipeline"
apply plugin: "com.webbfontaine.gradle.plugins.clover"
apply plugin: "com.webbfontaine.gradle.plugins.jasper-compiler"

configurations {
    jasperreports
    jasperreports.extendsFrom compile
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.10.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.10.Final"
    compile "com.webbfontaine:wf-common-file-validators:1.0.4"

    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'


    console "org.grails:grails-console"

    profile "org.grails.profiles:web"

    compile "com.webbfontaine.grails.plugins:i18n-asset-pipeline-grails:3.0.0"

    runtime "com.h2database:h2"
    runtime 'com.oracle:ojdbc8:12.2.0.1'
    runtime "org.apache.tomcat:tomcat-jdbc"
    compile "com.webbfontaine.grails.plugins:i18n-asset-pipeline-grails:${i18nAssetVersion}"


    def libs = ['grails-application': '[1.0.1,1.1.0)',
                'grails-banner'     : '[1.0.0,1.1.0)'
    ]
    for (p in libs) {
        compile("com.webbfontaine.grails.libs:wf-${p.key}:${p.value}")
    }

    def plugins = [
            'bootstrap'         : '3.3.2.3-RC1',
            'sw-layout-common'  : '3.3.2.28',
            'utils'             : '3.3.4',
            'conversation'      : '3.3.1.0-RC2',
            'rimm'              : '3.3.2.0-RC1',
            'taglibs'           : '3.3.3.0-RC4',
            'security'          : '3.3.1.0-RC1',
            'workflow'          : '3.3.1.0-RC2',
            'search'            : '3.3.2.0-RC1',
            'attached-documents': '3.3.1.2-RC1',
            'validation-rules'  : '3.2.0.9',
            'sys-info'        : '3.3.1.0-RC3'
    ]

    for (p in plugins) {
        compile("com.webbfontaine.grails.plugins:wf-${p.key}:${p.value}")
    }

    compile("com.webbfontaine.grails.plugins.ci:wf-rimm-views:3.3.0.1")

    compile("com.webbfontaine.grails.plugins.ci:wf-sw-layout:3.3.2.42")

    compile 'org.grails.plugins:mail:2.0.0.RC6'
    compile "org.grails:grails-datastore-rest-client:5.0.0.RC2"
    compile "org.apache.httpcomponents:httpcore:4.4.8"
    compile "org.apache.httpcomponents:httpclient:4.5.3"

    compile 'org.grails.plugins:excel-import:3.0.0.RC6'
    compile 'org.grails.plugins:excel-export:2.1'

    compile 'org.apache.commons:commons-csv:1.4'
    compile 'commons-net:commons-net:3.6'

    compile("org.grails.plugins:jasper:2.1.0.RC1")
    compile "org.apache.poi:poi:3.17"
    compile "net.sf.jasperreports:jasperreports:6.5.1"
    compile 'org.aspectj:aspectjweaver:1.9.6'
    compile 'io.micrometer:micrometer-spring-legacy:1.3.2'
    compile 'io.micrometer:micrometer-registry-prometheus:1.3.2'

    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    testCompile "org.grails:grails-test-mixins:3.3.0"
    compile "org.grails.plugins:export:2.0.0"

    compile "org.apache.commons:commons-lang3:3.5"
    compile "com.webbfontaine:wf-security-pdf:1.0.3"
    compile "com.lowagie:itext:2.1.7"

    if (gradle.ext.has('sources')) {
        gradle.ext.sources?.each { p ->
            compile project(":${p}")
        }
    }

    if (gradle.ext.has('sources_country')) {
        gradle.ext.sources_country?.each { p ->
            compile project(":${p}")
        }
    }
}

if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    task pathingJar2(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURL().toString().replaceFirst(/file:\/+/, '/')
                }.join(' ')
            }
        }
    }

    bootRun {
        jvmArgs('-Dspring.output.ansi.enabled=always')
        addResources = true
        dependsOn pathingJar2
        doFirst {
            classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar2.archivePath)
        }
    }
} else {
    bootRun {
        jvmArgs('-Dspring.output.ansi.enabled=always')
        addResources = true
    }
}

war {
    archiveName project.findProperty('warName') ? "${warName}.war" : "ephyto.${project.version}_${new Date().format('yyyy.MM.dd')}.war"
}

assets {
    minifyJs = true
    minifyCss = true
}


ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
    grails {
        pathingJar = true
    }
}


def logger(Object message) { println "ephyto\t\t: ${message}" }


clover {
    clover {
        excludes = [
                '**/Application.groovy',
                '**/Bootstrap.groovy',
                '**/UrlMappings.groovy',
                '**/*GrailsPlugin.groovy',
                '**/*Mock.groovy'
        ]
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.slf4j' && details.requested.name == 'slf4j-api') {
            details.useVersion '1.7.25'
        }
    }
}

jasper {
    srcDir = file('src/main/resources/reports')
    destDir = file('src/main/resources/reports')
}

task compileJasperJava(dependsOn: 'compileJava')  {
    doLast {
        def jasperSourceDir = file('src/main/resources/reports')
        def jasperTargetDir = file('src/main/resources/reports')
        ant {
            taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.jasperreports.asPath)
            jasperTargetDir.mkdirs()
            jrc(srcdir: jasperSourceDir, destdir: jasperTargetDir) {
                classpath(path: sourceSets.main.output.classesDir)
                include(name: '**/*.jrxml')
            }
        }
    }
}
classes.dependsOn compileJasperJava
